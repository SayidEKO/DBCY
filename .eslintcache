[{"/Users/sayid/Public/React/dbcy_app/src/layout/layout.js":"1","/Users/sayid/Public/React/dbcy_app/src/app.js":"2","/Users/sayid/Public/React/dbcy_app/src/views/work/work.js":"3","/Users/sayid/Public/React/dbcy_app/src/views/base.js":"4","/Users/sayid/Public/React/dbcy_app/src/views/my/my.js":"5","/Users/sayid/Public/React/dbcy_app/src/index.js":"6","/Users/sayid/Public/React/dbcy_app/src/store/store.js":"7","/Users/sayid/Public/React/dbcy_app/src/store/reducers/userReducer.js":"8","/Users/sayid/Public/React/dbcy_app/src/store/reducers/reducer.js":"9","/Users/sayid/Public/React/dbcy_app/src/reportWebVitals.js":"10","/Users/sayid/Public/React/dbcy_app/src/store/reducers/listReducer.js":"11","/Users/sayid/Public/React/dbcy_app/src/views/common/selectView.js":"12","/Users/sayid/Public/React/dbcy_app/src/request/api.js":"13","/Users/sayid/Public/React/dbcy_app/src/request/http.js":"14","/Users/sayid/Public/React/dbcy_app/src/store/reducers/detailReducer.js":"15","/Users/sayid/Public/React/dbcy_app/src/config.js":"16","/Users/sayid/Public/React/dbcy_app/src/views/workerbook.js":"17","/Users/sayid/Public/React/dbcy_app/src/views/index.js":"18","/Users/sayid/Public/React/dbcy_app/src/utils/routers.js":"19","/Users/sayid/Public/React/dbcy_app/src/components/ringMenus.js":"20","/Users/sayid/Public/React/dbcy_app/src/components/tabbarButton.js":"21","/Users/sayid/Public/React/dbcy_app/src/components/editView.js":"22","/Users/sayid/Public/React/dbcy_app/src/views/work/detail/detail.js":"23","/Users/sayid/Public/React/dbcy_app/src/views/work/new/new.js":"24","/Users/sayid/Public/React/dbcy_app/src/views/work/workTag.js":"25","/Users/sayid/Public/React/dbcy_app/src/views/work/workTagList.js":"26","/Users/sayid/Public/React/dbcy_app/src/views/common/errorPage.js":"27","/Users/sayid/Public/React/dbcy_app/src/views/add/add.js":"28","/Users/sayid/Public/React/dbcy_app/src/views/common/tableDetail.js":"29","/Users/sayid/Public/React/dbcy_app/src/utils/utils.js":"30","/Users/sayid/Public/React/dbcy_app/src/components/table.js":"31","/Users/sayid/Public/React/dbcy_app/src/components/alert.js":"32","/Users/sayid/Public/React/dbcy_app/src/components/radio.js":"33"},{"size":2198,"mtime":1625122807784,"results":"34","hashOfConfig":"35"},{"size":2165,"mtime":1625120758437,"results":"36","hashOfConfig":"35"},{"size":3442,"mtime":1624010743243,"results":"37","hashOfConfig":"35"},{"size":4139,"mtime":1623982773892,"results":"38","hashOfConfig":"35"},{"size":3333,"mtime":1625122766632,"results":"39","hashOfConfig":"35"},{"size":365,"mtime":1623313524009,"results":"40","hashOfConfig":"35"},{"size":298,"mtime":1623304616946,"results":"41","hashOfConfig":"35"},{"size":634,"mtime":1625383719646,"results":"42","hashOfConfig":"35"},{"size":335,"mtime":1623304645272,"results":"43","hashOfConfig":"35"},{"size":362,"mtime":1606705195053,"results":"44","hashOfConfig":"35"},{"size":619,"mtime":1623898325273,"results":"45","hashOfConfig":"35"},{"size":1527,"mtime":1624074259815,"results":"46","hashOfConfig":"35"},{"size":2400,"mtime":1625448414112,"results":"47","hashOfConfig":"35"},{"size":3671,"mtime":1625195067622,"results":"48","hashOfConfig":"35"},{"size":406,"mtime":1625132875744,"results":"49","hashOfConfig":"35"},{"size":6718,"mtime":1625220131741,"results":"50","hashOfConfig":"35"},{"size":2029,"mtime":1623322582124,"results":"51","hashOfConfig":"35"},{"size":1323,"mtime":1623322342881,"results":"52","hashOfConfig":"35"},{"size":1496,"mtime":1625120668346,"results":"53","hashOfConfig":"35"},{"size":1616,"mtime":1625226973091,"results":"54","hashOfConfig":"35"},{"size":1084,"mtime":1625242739846,"results":"55","hashOfConfig":"35"},{"size":5158,"mtime":1625283194797,"results":"56","hashOfConfig":"35"},{"size":11783,"mtime":1625288986370,"results":"57","hashOfConfig":"35"},{"size":6909,"mtime":1625288038998,"results":"58","hashOfConfig":"35"},{"size":961,"mtime":1624011841614,"results":"59","hashOfConfig":"35"},{"size":16516,"mtime":1625288108096,"results":"60","hashOfConfig":"35"},{"size":517,"mtime":1624010946540,"results":"61","hashOfConfig":"35"},{"size":921,"mtime":1624011227383,"results":"62","hashOfConfig":"35"},{"size":2415,"mtime":1625204945650,"results":"63","hashOfConfig":"35"},{"size":877,"mtime":1625216053561,"results":"64","hashOfConfig":"35"},{"size":6005,"mtime":1625226915461,"results":"65","hashOfConfig":"35"},{"size":4179,"mtime":1625291055677,"results":"66","hashOfConfig":"35"},{"size":672,"mtime":1625282072655,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"d9jo1a",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/sayid/Public/React/dbcy_app/src/layout/layout.js",[],["137","138"],"/Users/sayid/Public/React/dbcy_app/src/app.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/work/work.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/base.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/my/my.js",[],"/Users/sayid/Public/React/dbcy_app/src/index.js",[],"/Users/sayid/Public/React/dbcy_app/src/store/store.js",[],"/Users/sayid/Public/React/dbcy_app/src/store/reducers/userReducer.js",[],"/Users/sayid/Public/React/dbcy_app/src/store/reducers/reducer.js",[],"/Users/sayid/Public/React/dbcy_app/src/reportWebVitals.js",[],"/Users/sayid/Public/React/dbcy_app/src/store/reducers/listReducer.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/common/selectView.js",[],"/Users/sayid/Public/React/dbcy_app/src/request/api.js",[],"/Users/sayid/Public/React/dbcy_app/src/request/http.js",[],"/Users/sayid/Public/React/dbcy_app/src/store/reducers/detailReducer.js",[],"/Users/sayid/Public/React/dbcy_app/src/config.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/workerbook.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/index.js",[],"/Users/sayid/Public/React/dbcy_app/src/utils/routers.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/ringMenus.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/tabbarButton.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/editView.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/work/detail/detail.js",["139"],"//详情页面\nimport Base from '../../base';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Toast } from 'antd-mobile'\n\nimport store, { addTodo } from '../../../store/store';\n\nimport EditView from '../../../components/editView'\nimport TabbarButton from '../../../components/tabbarButton'\nimport Table from '../../../components/table'\nimport Alert from '../../../components/alert'\n\nimport { ncBaseDataSynServlet } from '../../../request/api'\nimport { getValue, isEmpty } from '../../../utils/utils';\n\n\nlet listItem\n//存表体模板\nlet templatesource = []\n//用于记录表名\nlet tableName = ''\n//记录表的下标\nlet tableIndex = -1\n//需要删除的远程数据\nlet deletes = []\n\nclass Detail extends Base {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      //高度\n      height: document.documentElement.clientHeight,\n      dataSource: [],\n      showAlert: false,\n    }\n    //列表选中数据的详情\n    listItem = props.location.state.item\n\n  }\n\n  //获取详情模版\n  getTemplate() {\n    let areacode_str = []\n    //获取表\n    this.props.location.state.table.forEach(item => {\n      areacode_str.push({ code: item })\n    })\n    let data = [{ funcode: this.props.location.state.funcode_detail, areacode_str }]\n    ncBaseDataSynServlet(1, data).then(result => {\n      let dataSource = []\n      if (result.VALUES.length !== 0) {\n        result.VALUES.forEach(template => {\n          // 遍历模板\n          for (let templateKey in template) {\n            //判断是否为表头\n            if (templateKey === 'card_head') {\n              let tempItem = listItem\n              //遍历表头字段\n              template[templateKey].forEach(templateItem => {\n                //遍历数据的key\n                for (let key in tempItem[templateKey]) {\n                  //找到就跳出继续下一个\n                  if (templateItem.code === key) {\n                    templateItem.value = tempItem[templateKey][key]\n                    continue\n                  }\n                }\n              })\n              dataSource.push(template)\n            }\n            //处理模板表体\n            else {\n              if (!isEmpty(listItem[templateKey])) {\n                //遍历数据\n                let body = []\n                listItem[templateKey].forEach(item => {\n                  //多条数据所以复制出多个模板\n                  let newTemplate = JSON.parse(JSON.stringify(template[templateKey]))\n                  //遍历模板表体\n                  newTemplate.forEach(templateItem => {\n                    for (let key in item) {\n                      //找到就跳出继续下一个\n                      if (templateItem.code === key) {\n                        templateItem.value = item[key]\n                        continue\n                      }\n                    }\n                  })\n\n                  body.push(newTemplate)\n                })\n                templatesource.push(template)\n                dataSource.push({ [templateKey]: body })\n              }\n            }\n          }\n        })\n      }\n      this.setState({ dataSource })\n      store.dispatch(addTodo('SET_DETAIL_DataSource', dataSource))\n    })\n  }\n\n  //初始底部按钮\n  initMenu() {\n    switch (this.props.flag) {\n      case 0:\n        return (\n          <div id='action' style={{ position: 'fixed', bottom: 0, width: '100%' }}>\n            <TabbarButton\n              sectorMenuItems={['提交']}\n              style={[{ flex: 1, padding: 10, borderRadius: 10, background: '#1296db' }]}\n              sectorMenuItemFunctions={[(this.onClick)]} />\n          </div>\n        )\n      case 1:\n        return (\n          <div id='action' style={{ position: 'fixed', bottom: 0, width: '100%', }}>\n            <TabbarButton\n              sectorMenuItems={['撤回']}\n              style={[{ flex: 1, padding: 10, borderRadius: 10, background: 'red' }]}\n              sectorMenuItemFunctions={[this.onClick]} />\n          </div>\n        )\n      case 2:\n        return (\n          <div id='action' style={{ display: 'flex', position: 'fixed', bottom: 0, width: '100%', }}>\n            <TabbarButton\n              sectorMenuItems={['审批']}\n              style={[{ flex: 1, padding: 10, borderRadius: 10, background: '#1296db' }]}\n              sectorMenuItemFunctions={[this.onClick]} />\n\n          </div>\n        )\n      case 3:\n        return (<div id='action' />)\n      default:\n        break;\n    }\n  }\n\n  //底部按钮响应事件\n  onClick = (title) => {\n    const { cuserid } = this.props\n    let data = {}\n    \n    switch (title) {\n      case '撤回':\n        data = { action: 'unapprove', pk: listItem.card_head['pk_nrna'], cuserid }\n        ncBaseDataSynServlet(3, data, 'ZPXQ').then(result => {\n          Toast.success(result.code, 1, () => {\n            this.props.history.goBack()\n          })\n        })\n        break;\n      case '提交':\n        this.setState({ showAlert: true })\n        // data = { action: 'sendapprove', pk: listItem.card_head['pk_nrna'], cuserid }\n        // this.save().then(result => {\n        //   ncBaseDataSynServlet(3, data, 'ZPXQ').then(result => {\n        //     Toast.success(result.code, 1, () => {\n        //       this.props.history.goBack()\n        //     })\n        //   })\n        // })\n        break;\n      case '审批':\n        this.setState({ showAlert: true })\n        break;\n      default:\n        break;\n    }\n  }\n\n  onEditCallBack = (index, value) => {\n    const { dataSource } = this.state\n    dataSource.forEach(item => {\n      for (let key in item) {\n        if (key === 'card_head') {\n          item[key][index].value = value\n        }\n      }\n    })\n    store.dispatch(addTodo('SET_DETAIL_DataSource', dataSource))\n    this.setState({ dataSource })\n  }\n\n  //新增\n  onTableAddLisenter = (value) => {\n    tableName = value\n  }\n\n  //编辑\n  onTableEditLisenter = (index, value) => {\n    tableIndex = index\n    tableName = value\n  }\n\n  //删除\n  onTableDeleteLisenter = (index, title) => {\n    const { dataSource } = this.state\n    dataSource.forEach(item => {\n      for (let key in item) {\n        //找到对应的表\n        if (key === title) {\n          //默认不是本地新增数据\n          let isAdd = false\n          //遍历表里的字段\n          item[key][index].forEach(v => {\n            //查看是否有isAdd，有则表示此条数据是本地新增可以直接删除，否则需要单独存下来\n            if (v.isAdd) {\n              isAdd = true\n            }\n          })\n          if (!isAdd) {\n            //远程数据的删除记录下来\n            item[title][index].push({ dr: 1 })\n            let bodys = deletes[title] === undefined ? [] : deletes[title]\n            bodys.push(item[title][index])\n            deletes.push({ [title]: bodys })\n          }\n          item[title].splice(index, 1)\n        }\n      }\n    })\n    store.dispatch(addTodo('SET_DETAIL_DataSource', dataSource))\n    this.setState({ dataSource })\n  }\n\n  /**\n   * \n   * @param {审批意见} checkValue \n   * @param {审批内容} content \n   * @param {改派、加签人} checkUser \n   */\n  onAlertClickSubmit = (checkValue, content, checkUser) => {\n    console.log(checkValue+ content + checkUser);\n    const { cuserid } = this.props\n    this.setState({ showAlert: false })\n    // let data = { action: 'approve', pk: listItem.card_head['pk_nrna'], cuserid }\n    // ncBaseDataSynServlet(3, data, 'ZPXQ').then(result => {\n    //   Toast.success(result.code, 1, () => {\n    //     this.props.history.goBack()\n    //   })\n    // })\n  }\n\n  onAlertClickCancel = () => {\n    this.setState({ showAlert: false })\n  }\n\n  //保存方法\n  async save() {\n    // const { dataSource } = this.state\n    // let head = {}, bodys = []\n\n    // card_head.forEach(v => {\n    //   let value = getValue(v)\n    //   //没有值则不传该字段,billno\n    //   if (value !== '' && v.code !== 'billno') {\n    //     head[v.code] = value\n    //   }\n    // })\n    // head['pk_nrna'] = item.card_head['pk_nrna']\n    // card_body.forEach(body => {\n    //   let item = {}\n    //   body.forEach(v => {\n    //     let value = getValue(v)\n    //     //没有值则不传该字段\n    //     if (value !== '') {\n    //       item[v.code] = value\n    //     }\n    //   })\n    //   bodys.push(item)\n    // })\n    // console.log(head);\n\n    // await ncBaseDataSynServlet(3, { action: 'add', head, bodys }, 'ZPXQ').then(result => {\n    //   console.log(result);\n    // })\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let table = props.table\n    if (!isEmpty(table)) {\n      props.propDataSource.forEach(item => {\n        for (let key in item) {\n          if (key === tableName) {\n            if (tableIndex === -1) {\n              item[tableName].push(table)\n            } else {\n              item[tableName][tableIndex] = table\n            }\n          }\n        }\n      })\n      //用完重置\n      tableName = ''\n      tableIndex = -1\n      store.dispatch(addTodo('SET_DETAIL_Table', null))\n      store.dispatch(addTodo('SET_DETAIL_DataSource', props.propDataSource))\n    }\n    return { dataSource: props.propDataSource }\n  }\n\n  componentDidMount() {\n    const { dataSource } = this.state\n\n    let element = document.getElementById('action');\n    if (element !== null) {\n      let height = document.documentElement.clientHeight - element.clientHeight;\n      this.setState({ height })\n    }\n\n    if (dataSource.length === 0) {\n      this.getTemplate()\n    }\n  }\n\n  render() {\n    const { height, dataSource, showAlert } = this.state\n    return (\n      <div style={{ position: 'relative' }}>\n        <Alert\n          showAlert={showAlert}\n          onAlertClickSubmit={this.onAlertClickSubmit}\n          onAlertClickCancel={this.onAlertClickCancel} />\n        <div style={{ background: 'white', paddingTop: 10, overflow: 'scroll', height }}>\n          {\n            dataSource.map((items, bodyIndex) => {\n              for (let key in items) {\n                if (key === 'card_head') {\n                  return (\n                    items[key].map((item, index) => {\n                      return (\n                        <EditView\n                          key={item.code}\n                          index={index}\n                          // edit={location.state.edit}\n                          edit={true}\n                          title={item.label}\n                          value={getValue(item)}\n                          //参照编码\n                          define={item.define1}\n                          type={item.itemtype}\n                          hiddenLine={items[key].length - 1 === index}\n                          onEditCallBack={this.onEditCallBack} />\n                      )\n                    })\n                  )\n                }\n                else {\n                  return (\n                    <Table\n                      key={key}\n                      title={key}\n                      templateSource={templatesource[bodyIndex - 1][key]}\n                      tableSource={items[key]}\n                      onTableAddLisenter={this.onTableAddLisenter}\n                      onTableEditLisenter={this.onTableEditLisenter}\n                      onTableDeleteLisenter={this.onTableDeleteLisenter} />\n                  )\n                }\n              }\n              return null\n            })\n          }\n        </div>\n        {this.initMenu()}\n      </div>\n    )\n  }\n}\n\n//映射函数(绑定属性在porps)\nconst mapStateToProps = state => {\n  return {\n    cuserid: state.userModule.cuserid,\n    flag: state.listModule.flag,\n    propDataSource: state.detailModule.dataSource,\n    table: state.detailModule.table\n  }\n}\n\nexport default connect(mapStateToProps)(withRouter(Detail))","/Users/sayid/Public/React/dbcy_app/src/views/work/new/new.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/work/workTag.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/work/workTagList.js",["140"],"/**\n * 列表页面\n */\n import Base from \"../base\";\n import ReactDOM from \"react-dom\";\n import { connect } from \"react-redux\";\n import { withRouter } from \"react-router-dom\";\n import { Tabs, Badge, ListView, PullToRefresh, DatePicker, Checkbox, Toast } from \"antd-mobile\";\n \n import store, { addTodo } from \"../../store/store\";\n \n import RingMneus from \"../../components/ringMenus\";\n import TabbarButton from \"../../components/tabbarButton\";\n \n import { ncBaseDataSynServlet } from \"../../request/api\";\n \n import { router2detail, router2new } from \"../../utils/routers\";\n \n const tabs = [\n   { title: <Badge>待提交</Badge> },\n   { title: <Badge>已提交</Badge> },\n   { title: <Badge dot>待处理</Badge> },\n   { title: <Badge>已处理</Badge> },\n ];\n \n //页数\n let _page = 0;\n //是否还有数据\n let hasMore = true;\n //模版\n let template = {}\n //原数据\n let baseData = []\n \n class WorkTagList extends Base {\n \n   constructor(props) {\n     super(props)\n     const dataSource = new ListView.DataSource({ rowHasChanged: (row1, row2) => row1 !== row2 });\n     this.state = {\n       height: document.documentElement.clientHeight,\n       //数据源\n       dataSource,\n       //加载状态\n       isLoading: true,\n       //刷新状态\n       refreshing: true,\n       //多选状态\n       multi_select: false,\n       //是否筛选\n       search: false,\n       //是否空数据提示\n       empty: true,\n     };\n   }\n \n   //初始化多选状态下按钮\n   initMenus() {\n     switch (this.props.flag) {\n       case 0:\n         return (\n           <div style={{ width: '100%' }}>\n             <TabbarButton\n               sectorMenuItems={['删除', '取消']}\n               style={[\n                 { flex: 1, padding: 10, borderTopLeftRadius: 10, borderBottomLeftRadius: 10, background: '#1296db' },\n                 { flex: 1, padding: 10, borderTopRightRadius: 10, borderBottomRightRadius: 10, background: 'red' }\n               ]}\n               sectorMenuItemFunctions={[this.save, this.cancel]} />\n           </div>\n         )\n       case 1:\n         return (\n           <div style={{ width: '100%' }}>\n             <TabbarButton\n               sectorMenuItems={['撤回', '取消']}\n               style={[\n                 { flex: 1, padding: 10, borderTopLeftRadius: 10, borderBottomLeftRadius: 10, background: '#1296db' },\n                 { flex: 1, padding: 10, borderTopRightRadius: 10, borderBottomRightRadius: 10, background: 'red' }\n               ]}\n               sectorMenuItemFunctions={[this.save, this.cancel]} />\n           </div>\n         )\n       case 2:\n         return (\n           <div style={{ width: '100%' }}>\n             <TabbarButton\n               sectorMenuItems={['审批', '驳回', '取消']}\n               style={[\n                 { flex: 1, padding: 10, borderTopLeftRadius: 10, borderBottomLeftRadius: 10, background: '#1296db' },\n                 { flex: 1, padding: 10, background: 'blue' },\n                 { flex: 1, padding: 10, borderTopRightRadius: 10, borderBottomRightRadius: 10, background: 'red' }\n               ]}\n               sectorMenuItemFunctions={[this.save, this.save, this.cancel]} />\n           </div>\n         )\n       default:\n         break;\n     }\n   }\n \n   //保存相关\n   save = (title) => {\n     const { cuserid } = this.props\n     let selectPK = [], action = ''\n \n     this.state.dataSource._dataBlob.s1.forEach(v => {\n       if (v.checked) {\n         selectPK.push(v.pk)\n       }\n     })\n \n     if (selectPK.length === 0) {\n       Toast.fail('请勾选后再操作！', 1)\n       return\n     } else {\n       Toast.loading('请稍后...', 0)\n     }\n \n     switch (title) {\n       case '删除':\n         action = 'delete'\n         break;\n       case '撤回':\n         action = 'unapprove'\n         break;\n       case '审批':\n         action = 'approve'\n         break;\n       case '驳回':\n         action = 'unapprove'\n         break;\n \n       default:\n         break;\n     }\n \n     ncBaseDataSynServlet(3, { action, pk: selectPK[0], cuserid }, 'ZPXQ').then(result => {\n       Toast.success(result.data.message, 1)\n       //filter方法筛选数组符合条件的留下\n       let newData = JSON.parse(JSON.stringify(this.state.dataSource._dataBlob.s1)).filter(item => !item.checked)\n       this.setState({\n         dataSource: this.state.dataSource.cloneWithRows(newData),\n         empty: newData.length > 0 ? false : true,\n         multi_select: false\n       })\n     })\n   }\n \n   //多选取消\n   cancel = () => {\n     let newData = JSON.parse(JSON.stringify(this.state.dataSource._dataBlob.s1))\n     newData.forEach(element => {\n       element.checked = false\n     });\n     this.setState({\n       dataSource: this.state.dataSource.cloneWithRows(newData),\n       multi_select: false\n     })\n   }\n \n   //菜单点击事件\n   onRingMneusClick = (title) => {\n     switch (title) {\n       case '新增':\n        store.dispatch(addTodo('SET_DETAIL_DataSource', []))\n        //  router2new(this, this.props.location.state)\n        let tableInfo = this.props.location.state\n         router2detail(this, tableInfo)\n         break;\n       case '编辑':\n         if (this.state.dataSource._dataBlob.s1.length > 0) {\n           let newData = JSON.parse(JSON.stringify(this.state.dataSource._dataBlob.s1))\n           this.setState({\n             multi_select: !this.state.multi_select,\n             dataSource: this.state.dataSource.cloneWithRows(newData)\n           })\n         }\n         break;\n       case '筛选':\n         this.setState({ search: !this.state.search })\n         break;\n \n       default:\n         break;\n     }\n   }\n \n   //下拉刷新\n   pullToRefresh() {\n     return (\n       <PullToRefresh refreshing={this.state.refreshing} onRefresh={() => {\n         this.state.dataSource = this.state.dataSource.cloneWithRows([])\n         this.getData(_page = 0)\n       }} />\n     )\n   }\n \n   //上拉加载\n   onEndReached = () => {\n     //没有数据，多选状态下, 空数据状态下禁止加载更多\n     if (!hasMore || this.state.multi_select || this.state.empty) {\n       return;\n     }\n     this.getData(++_page)\n   }\n \n   //页脚\n   foot = () => {\n     return (\n       <div style={{ padding: 10, textAlign: 'center' }}>\n         {this.state.isLoading ? '正在加载...' : '已经到底了'}\n       </div>\n     )\n   }\n \n   //主体\n   item = (rowData, sectionID, rowID) => {\n     const { multi_select, dataSource } = this.state\n     return (\n       <div\n         onClick={() => {\n           //多选状态下禁止跳转\n           if (!multi_select) {\n             let tableInfo = this.props.location.state\n             tableInfo.edit = this.props.flag === 0 ? true : false\n             tableInfo.item = baseData[rowID]\n             store.dispatch(addTodo('SET_DETAIL_DataSource', []))\n             router2detail(this, tableInfo)\n           }\n           let newData = JSON.parse(JSON.stringify(dataSource._dataBlob.s1));\n           newData[rowID].checked = !newData[rowID].checked;\n           this.setState({ dataSource: dataSource.cloneWithRows(newData) })\n         }}\n         style={{ display: 'flex', alignItems: 'center', background: '#F5F5F9' }}>\n \n         <div\n           style={{\n             display: 'flex',\n             alignItems: 'center',\n             margin: 5,\n             padding: 5,\n             width: '100%',\n             background: 'white',\n             borderRadius: 10\n           }}>\n           <Checkbox\n             checked={rowData.checked}\n             style={{ display: multi_select ? 'flex' : 'none', padding: 5 }} />\n           <div>\n             {\n               rowData.data.card_head.map((item, index) => {\n                 let value\n                 if (typeof item.value == \"object\") {\n                   value = item.value.name\n                 } else {\n                   value = item.value\n                 }\n                 return (\n                   <div key={rowID + index} style={{ display: 'flex', fontSize: 12 }}>\n                     <div style={{ padding: 5 }}>{item.label}:</div>\n                     <div style={{ padding: 5, color: 'gray' }}>{value}</div>\n                   </div>\n                 )\n               })\n             }\n             {\n               rowData.data.card_body.map((item, index) => {\n                 let value\n                 if (typeof item.value == \"object\") {\n                   value = item.value.name\n                 } else {\n                   value = item.value\n                 }\n                 return (\n                   <div key={rowID + index} style={{ display: 'flex', fontSize: 12 }}>\n                     <div style={{ padding: 5 }}>{item.label}:</div>\n                     <div style={{ padding: 5, color: 'gray' }}>{value}</div>\n                   </div>\n                 )\n               })\n             }\n           </div>\n         </div>\n       </div>\n     );\n   };\n \n   getData(page = 0) {\n     const { cuserid, pk_group, pk_org, flag } = this.props\n     let data = [], number = 10\n     if (this.state.dataSource._dataBlob !== null) {\n       data = this.state.dataSource._dataBlob.s1\n     }\n \n     let paramsData = { action: 'index_query', cuserid, pk_group, pk_org, state: flag }\n     ncBaseDataSynServlet(3, paramsData, 'ZPXQ').then(result => {\n       baseData = result.VALUES\n       result.VALUES.forEach(v => {\n         let head = v.card_head\n         let bodys = v.card_body\n         //复制模版\n         let temp = JSON.parse(JSON.stringify(template))\n \n         if (head !== undefined) {\n           //遍历表头设值\n           for (let key in head) {\n             temp.card_head.forEach(v => {\n               if (v.code === key) {\n                 v.value = head[key]\n               }\n             })\n           }\n         }\n \n         if (bodys !== undefined) {\n           //遍历表体设值\n           bodys.forEach(body => {\n             for (let key in body) {\n               temp.card_body.forEach(v => {\n                 if (v.code === key) {\n                   v.value = body[key]\n                 }\n               })\n             }\n           })\n         }\n         //重新组装的数据\n         let item = {}\n         //添加选中状态\n         item.checked = false\n         //设置pk\n         item.pk = head.pk_nrna\n         item.data = temp\n         data.push(item)\n       })\n       // //返回数据条数小于请求数据条数表示没有更多\n       hasMore = result.VALUES.length < number ? false : true\n       this.setState({\n         dataSource: this.state.dataSource.cloneWithRows(data),\n         refreshing: false,\n         isLoading: false,\n         empty: data.length > 0 ? false : true\n       })\n     })\n   }\n \n   componentDidMount() {\n     this.state.height = this.state.height - ReactDOM.findDOMNode(this.tabs).offsetTop - 40\n     let areacode_str = []\n     //获取列表节点\n     let funcode = this.props.location.state.funcode_list\n     //获取表\n     this.props.location.state.table.forEach(item => {\n       areacode_str.push({ code: item })\n     })\n     ncBaseDataSynServlet(1, [{ funcode, areacode_str }]).then(result => {\n       if (result.VALUES !== 0) {\n         template.card_head = result.VALUES[0]['card_head']\n         template.card_body = result.VALUES[1]['card_body']\n       }\n       this.getData(_page = 0)\n     })\n   }\n \n   render() {\n     const { search, height, multi_select, dataSource, empty } = this.state\n     const { flag, startTime, endTime } = this.props\n     return (\n       <div>\n         <div style={{ display: multi_select ? 'none' : 'flex', position: 'absolute', bottom: 20, right: 20, zIndex: 2 }}>\n           <RingMneus\n             sectorMenuItems={['新增', '编辑', '筛选']}\n             closeMenus={multi_select}\n             sectorMenuItemFunctions={[this.onRingMneusClick, this.onRingMneusClick, this.onRingMneusClick]} />\n         </div>\n         <div style={{ display: search ? 'flex' : 'none', color: 'gray', padding: 10 }}>\n           <div style={{ flex: 1, fontSize: 14 }}>\n             <DatePicker mode=\"date\" onChange={date => {\n               store.dispatch(addTodo('SET_LIST_STARTTIME', date))\n               this.setState({ dataSource: dataSource.cloneWithRows([]) })\n               this.getData(_page = 0)\n             }}>\n               <div>开始时间:{startTime.toLocaleDateString()}</div>\n             </DatePicker>\n           </div>\n           <div style={{ flex: 1, fontSize: 14, textAlign: 'right' }}>\n             <DatePicker mode=\"date\" onChange={date => {\n               store.dispatch(addTodo('SET_LIST_ENDTIME', date))\n               this.setState({ dataSource: dataSource.cloneWithRows([]) })\n               this.getData(_page = 0)\n             }}>\n               <div>结束时间:{endTime.toLocaleDateString()}</div>\n             </DatePicker>\n           </div>\n         </div>\n         <Tabs\n           tabs={tabs}\n           initialPage={flag}\n           ref={el => this.tabs = el}\n           onChange={(tab, index) => {\n             store.dispatch(addTodo('SET_LIST_FLAG', index))\n             this.setState({ dataSource: this.state.dataSource.cloneWithRows([]) }, ()=> {\n               this.getData(_page = 0)\n             })\n           }}>\n           <div>\n             <div\n               onClick={() => this.getData(_page = 0)}\n               style={{ height, alignItems: 'center', justifyContent: 'center', display: empty ? 'flex' : 'none' }}>\n               暂无数据\n             </div>\n             <ListView\n               pageSize={5}\n               dataSource={dataSource}\n               pullToRefresh={this.pullToRefresh()}\n               onEndReached={this.onEndReached}\n               renderFooter={this.foot}\n               renderRow={this.item}\n               style={{ height, fontSize: 14, display: empty ? 'none' : 'flex' }}\n               onScroll={() => { console.log('scroll'); }} />\n           </div>\n           <div>\n             <div\n               onClick={() => this.getData(_page = 0)}\n               style={{ height, alignItems: 'center', justifyContent: 'center', display: empty ? 'flex' : 'none' }}>\n               暂无数据\n             </div>\n             <ListView\n               pageSize={5}\n               dataSource={dataSource}\n               pullToRefresh={this.pullToRefresh()}\n               onEndReached={this.onEndReached}\n               renderFooter={this.foot}\n               renderRow={this.item}\n               style={{ height, fontSize: 14, display: empty ? 'none' : 'flex' }}\n               onScroll={() => { console.log('scroll'); }} />\n           </div><div>\n             <div\n               onClick={() => this.getData(_page = 0)}\n               style={{ height, alignItems: 'center', justifyContent: 'center', display: empty ? 'flex' : 'none' }}>\n               暂无数据\n             </div>\n             <ListView\n               pageSize={5}\n               dataSource={dataSource}\n               pullToRefresh={this.pullToRefresh()}\n               onEndReached={this.onEndReached}\n               renderFooter={this.foot}\n               renderRow={this.item}\n               style={{ height, fontSize: 14, display: empty ? 'none' : 'flex' }}\n               onScroll={() => { console.log('scroll'); }} />\n           </div><div>\n             <div\n               onClick={() => this.getData(_page = 0)}\n               style={{ height, alignItems: 'center', justifyContent: 'center', display: empty ? 'flex' : 'none' }}>\n               暂无数据\n             </div>\n             <ListView\n               pageSize={5}\n               dataSource={dataSource}\n               pullToRefresh={this.pullToRefresh()}\n               onEndReached={this.onEndReached}\n               renderFooter={this.foot}\n               renderRow={this.item}\n               style={{ height, fontSize: 14, display: empty ? 'none' : 'flex' }}\n               onScroll={() => { console.log('scroll'); }} />\n           </div>\n         </Tabs>\n         <div style={{ display: multi_select ? 'flex' : 'none', position: 'fixed', bottom: 0, width: '100%' }}>\n           {this.initMenus()}\n         </div>\n       </div >\n     )\n   }\n }\n \n //映射函数(绑定属性在porps)\n const mapStateToProps = state => {\n   return {\n     flag: state.listModule.flag,\n     startTime: state.listModule.startTime,\n     endTime: state.listModule.endTime,\n \n     cuserid: state.userModule.cuserid,\n     pk_group: state.userModule.pk_group,\n     pk_org: state.userModule.pk_org\n   }\n }\n \n export default connect(mapStateToProps)(withRouter(WorkTagList))","/Users/sayid/Public/React/dbcy_app/src/views/common/errorPage.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/add/add.js",[],"/Users/sayid/Public/React/dbcy_app/src/views/common/tableDetail.js",[],"/Users/sayid/Public/React/dbcy_app/src/utils/utils.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/table.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/alert.js",[],"/Users/sayid/Public/React/dbcy_app/src/components/radio.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":240,"column":13,"nodeType":"147","messageId":"148","endLine":240,"endColumn":20},{"ruleId":"145","severity":1,"message":"149","line":17,"column":26,"nodeType":"147","messageId":"148","endLine":17,"endColumn":36},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'cuserid' is assigned a value but never used.","Identifier","unusedVar","'router2new' is defined but never used.","no-global-assign","no-unsafe-negation"]